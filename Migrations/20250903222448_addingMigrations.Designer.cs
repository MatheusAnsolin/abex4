// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SiteBrecho.Data;

#nullable disable

namespace SiteBrecho.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250903222448_addingMigrations")]
    partial class addingMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SiteBrecho.Models.AdministradorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Administradores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CriadoEm = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            Nome = "Admin",
                            SenhaHash = "123456"
                        });
                });

            modelBuilder.Entity("SiteBrecho.Models.EstoqueModel", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantidadeAtual")
                        .HasColumnType("integer");

                    b.HasKey("ProdutoId");

                    b.ToTable("Estoques");
                });

            modelBuilder.Entity("SiteBrecho.Models.FornecedorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CnpjCpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("SiteBrecho.Models.MovimentacaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Movimentacoes");
                });

            modelBuilder.Entity("SiteBrecho.Models.ProdutoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<int?>("FornecedorModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("PrecoCusto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("PrecoVenda")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorModelId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AtualizadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            CriadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Jaqueta de couro preta, estilo motociclista. Em ótimo estado.",
                            Nome = "Jaqueta de Couro Vintage",
                            PrecoCusto = 70.00m,
                            PrecoVenda = 180.50m
                        },
                        new
                        {
                            Id = -2,
                            AtualizadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            CriadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Calça jeans de cintura alta, lavagem clara. Perfeita para um look retrô.",
                            FornecedorId = 1,
                            Nome = "Calça Jeans Reta Anos 90",
                            PrecoCusto = 25.00m,
                            PrecoVenda = 79.90m
                        },
                        new
                        {
                            Id = -3,
                            AtualizadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            CriadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            FornecedorId = 1,
                            Nome = "Vestido Floral Longo",
                            PrecoCusto = 35.50m,
                            PrecoVenda = 95.00m
                        },
                        new
                        {
                            Id = -4,
                            AtualizadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            CriadoEm = new DateTime(2025, 9, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Bolsa de ombro em couro legítimo, com detalhes em metal dourado.",
                            FornecedorId = 2,
                            Nome = "Bolsa de Couro Caramelo",
                            PrecoCusto = 50.00m,
                            PrecoVenda = 130.00m
                        });
                });

            modelBuilder.Entity("SiteBrecho.Models.EstoqueModel", b =>
                {
                    b.HasOne("SiteBrecho.Models.ProdutoModel", "Produto")
                        .WithOne()
                        .HasForeignKey("SiteBrecho.Models.EstoqueModel", "ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("SiteBrecho.Models.MovimentacaoModel", b =>
                {
                    b.HasOne("SiteBrecho.Models.AdministradorModel", "Administrador")
                        .WithMany()
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteBrecho.Models.ProdutoModel", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("SiteBrecho.Models.ProdutoModel", b =>
                {
                    b.HasOne("SiteBrecho.Models.FornecedorModel", null)
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorModelId");
                });

            modelBuilder.Entity("SiteBrecho.Models.FornecedorModel", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
